using AbstractPlotting
using AbstractPlotting.MakieLayout
using GLMakie
using LightGraphs
using MetaGraphs

# Want to have the template
# And also the currently inferred velocity.
# And a graph that describes how close the proposal is to the correctc answer
# Also a scene graph estimate with probabilities i.e. Austin's pres. 
# But for now two side by side renderings is good. 

"""WORKS AT BASICALLY FULL SPEED AT 1000 RESOLUTION"""

res = 1000
outer_padding = 0
num_updates = 180
scene, layout = layoutscene(outer_padding,
                            resolution = (2*res, res), 
                            backgroundcolor=RGBf0(0, 0, 0))

dot1 = [(rand(range(0, stop=1000)), rand(range(0, stop=1000))) for i in range(1, stop=1000)]
dot2 = [(i, .5) for i in range(0, stop=1, length=num_updates)]

f(t, coords) = coords[t]

ncols = 2
nrows = 1
# create a grid of LAxis objects
axes = [LAxis(scene, backgroundcolor=RGBf0(0, 0, 0)) for i in 1:nrows, j in 1:ncols]
layout[1:nrows, 1:ncols] = axes

time_node = Node(1);

scatter!(axes[1], lift(t -> f(t, dot2), time_node), markersize=20px, color=RGBf0(255, 255, 255))
limits!(axes[1], BBox(0, 1, 0, 1))
scatter!(axes[2], lift(t -> f(t, dot2), time_node), markersize=20px, color=RGBf0(255, 255, 255))
limits!(axes[2], BBox(0, 1, 0, 1))
display(scene)

for i in range(1, stop=num_updates)
    time_node[] = i
    sleep(1/60)
end    

""" Adding a recording step significantly slows down onscreen animation, but movie is fine """
# record(scene, "output.mp4", range(1, stop=num_updates), framerate=60, compression=0) do i
#     time_node[] = i
# end

GLMakie.destroy!(GLMakie.global_gl_screen())


